import os
os.chdir('/data/sidrees/ALI_atlas/')
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter(action='ignore', category=UserWarning)
import scanpy as sc
import copy
import torch
import scarches as sca
from scarches.dataset.trvae.data_handling import remove_sparsity
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import gdown
import sankey
import anndata
import pandas as pd
from pySankey.sankey import sankey
from matplotlib.pyplot import rc_context
import scib
import warnings
warnings.filterwarnings("ignore")


#Doing this only output convenience 
directory = "preprocessed/"
bench_dir = "benchmarking/"
adata = sc.read(directory+"Full_adata_h_pre.h5ad")
#Using the healthy controls to test the scores
adata.X.data = adata.raw.X.data
#Creating new metadata in accordance with SCIB variables
adata.obs['cluster'] = adata.obs['leiden_1']
adata.obs['celltype'] = adata.obs['CellTypes']
adata.obs['batch'] = adata.obs['study']
#adata.layers['counts'] = adata.X.data

print(adata.X.data)
adata.shape
#adata.layers['raw'] = adata.X.data.copy()
sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
adata.raw = adata
adata.layers['norm'] = adata.X.copy()

sc.pp.highly_variable_genes(adata, batch_key="study",min_mean=0.03, flavor="cell_ranger",n_top_genes=1000)
adata.var['highly_variable'].value_counts()
adata.var['highly_variable_1k'] = adata.var['highly_variable']

sc.pp.highly_variable_genes(adata, batch_key="study",min_mean=0.03, flavor="cell_ranger",n_top_genes=6000)
adata.var_names_make_unique()
adata.obs_names_make_unique()


def ReRunAdata(HVG,scaled):
	adata = sc.read(directory+"Full_adata_h_pre.h5ad")
	adata = adata[:,HVG]
	adata.obs['cluster'] = adata.obs['leiden_1']
	adata.obs['celltype'] = adata.obs['CellTypes']
	adata.obs['batch'] = adata.obs['study']
	if scaled == True:
		adata.layers['counts'] = adata.layers['raw']
		sc.pp.normalize_total(adata)
		sc.pp.scale(adata)
		sc.tl.pca(adata)
		sc.pp.neighbors(adata)
	else:
		adata.layers['counts'] = adata.layers['raw']
		sc.pp.normalize_total(adata)
		sc.tl.pca(adata)
		sc.pp.neighbors(adata)
	return(adata)

def ReRunAdata_SC(HVG):
	adata = sc.read(directory+"Full_adata_h_pre.h5ad")
	adata = adata[:,HVG]
	adata.obs['cluster'] = adata.obs['leiden_1']
	adata.obs['celltype'] = adata.obs['CellTypes']
	adata.obs['batch'] = adata.obs['study']
	adata.layers['counts'] = adata.layers['raw']
	sc.tl.pca(adata)
	sc.pp.neighbors(adata)
	return(adata)
	
SixK = adata.var_names[adata.var['highly_variable']]
twoK = adata.var_names[adata.var['highly_variable_1k']]

	
def runScib_SCVI():
	adata = ReRunAdata_SC(SixK)
	adata = adata[:,SixK]
	sc.tl.pca(adata)
	sc.pp.neighbors(adata)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = scib.ig.scvi(adata, batch="batch",max_epochs = 10)
	adata_int.var_names_make_unique()
	adata_int.obs_names_make_unique()
	sc.pp.neighbors(adata_int, use_rep="X_emb")
	scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
	scib.pp.reduce_data(adata_int, n_top_genes=6000, use_rep = 'X_emb', pca=False, neighbors=True)
	adata = ReRunAdata_SC(SixK)
	score = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score.to_csv(bench_dir+'score_scvi_6k.csv')
	adata = ReRunAdata_SC(twoK)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata.layers['counts'] = adata.layers['raw']
	adata_int = scib.ig.scvi(adata, batch="batch",max_epochs = 10)
	sc.pp.neighbors(adata_int, use_rep="X_emb")
	scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
	scib.pp.reduce_data(adata_int, n_top_genes=1000,  use_rep = 'X_emb', pca=False, neighbors=True)
	adata = ReRunAdata_SC(twoK)
	score_1k = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score_1k.to_csv(bench_dir+'score_scvi_1k.csv')
	return adata
	
runScib_SCVI()


def runScib_SCANVI():
	adata = ReRunAdata_SC(SixK)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = scib.ig.scanvi(adata, batch="batch",labels = 'celltype')
	sc.pp.neighbors(adata_int, use_rep="X_emb")
	scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
	scib.pp.reduce_data(adata_int, n_top_genes=6000, use_rep = 'X_emb', pca=False, neighbors=True)
	adata = ReRunAdata_SC(SixK)
	score = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score.to_csv(bench_dir+'score_scanvi_6k.csv')
	adata = ReRunAdata_SC(twoK)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata.layers['counts'] = adata.layers['raw']
	adata_int = scib.ig.scanvi(adata, batch="batch",labels='celltype')
	sc.pp.neighbors(adata_int, use_rep="X_emb")
	scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
	scib.pp.reduce_data(adata_int, n_top_genes=1000,  use_rep = 'X_emb', pca=False, neighbors=True)
	adata = ReRunAdata_SC(twoK)
	score_1k = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score_1k.to_csv(bench_dir+'score_scanvi_1k.csv')
	
	return(adata)

runScib_SCANVI()


def runScib_Non_raw(method):
	adata = ReRunAdata(SixK,False)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=6000, use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=6000, pca=True, neighbors=True)
	adata = ReRunAdata(SixK,False)
	score_6k = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score_6k.to_csv(bench_dir+'score_{}_6k_unscaled.csv'.format(method))
	
	adata = ReRunAdata(twoK,True)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000,  use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000, pca=True, neighbors=True)
	adata = ReRunAdata(twoK,True)
	score = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score.to_csv(directory+'score_{}_1k_scaled.csv'.format(method))
	adata = ReRunAdata(twoK,False)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000,  use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000, pca=True, neighbors=True)
	adata = ReRunAdata(twoK,False)
	score_1k = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score_1k.to_csv(bench_dir+'score_{}_1k_unscaled.csv'.format(method))
	return adata

def runScib_Non_raw_scanorama(method):
	adata = ReRunAdata(SixK,True)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=6000,  use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=6000, pca=True, neighbors=True)
	adata = ReRunAdata(SixK,True)
	score = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score.to_csv(bench_dir+'score_{}_6k_scaled.csv'.format(method))
	adata = ReRunAdata(SixK,False)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000, use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000, pca=True, neighbors=True)
	adata = ReRunAdata(SixK,False)
	score_1k = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score_1k.to_csv(bench_dir+'score_{}_6k_unscaled.csv'.format(method))
		#####
	adata = ReRunAdata(twoK,True)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000,  use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000, batch_key="batch", pca=True, neighbors=True)
	adata = ReRunAdata(twoK,True)
	score = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score.to_csv(bench_dir+'score_{}_1k_scaled.csv'.format(method))
	adata = ReRunAdata(twoK,False)
	scib.me.cluster_optimal_resolution(adata, cluster_key="cluster",\
		label_key="batch")
	adata_int = getattr(scib.ig, method)(adata,batch='batch')
	adata_int.uns = adata.uns.copy()
	adata_int.obsp = adata.obsp.copy()
	adata_int.layers = adata.layers.copy()
	if 'X_emb' in adata_int.obsm:
		sc.pp.neighbors(adata_int, use_rep = 'X_emb')
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000,  use_rep = 'X_emb', pca=False, neighbors=True)
	else:
		sc.tl.pca(adata_int)
		sc.pp.neighbors(adata_int)
		scib.me.cluster_optimal_resolution(adata_int, cluster_key="cluster", label_key="celltype")
		scib.pp.reduce_data(adata_int, n_top_genes=1000, pca=True, neighbors=True)
	adata = ReRunAdata(twoK,False)
	score_1k = scib.metrics.metrics(adata, adata_int, batch_key = 'batch', 
		label_key = 'celltype',embed='X_pca', cluster_key='cluster', cluster_nmi=None,
		ari_=True, nmi_=True, nmi_method='arithmetic', nmi_dir=True, 
		silhouette_=True, si_metric='euclidean', pcr_=True, cell_cycle_=True, 
		organism='human', hvg_score_=False, isolated_labels_=True, 
		isolated_labels_f1_=True, isolated_labels_asw_=True, 
		n_isolated=None, graph_conn_=True, trajectory_=False, 
		kBET_=True, lisi_graph_=True, ilisi_=True, clisi_=True, 
		subsample=0.5, n_cores=5, type_=None, verbose=False)
	score_1k.to_csv(bench_dir+'score_{}_1k_unscaled.csv'.format(method))
	return adata
	
runScib_Non_raw_scanorama('scanorama')

runScib_Non_raw('harmony')

runScib_Non_raw('combat')

runScib_Non_raw('mnn')
